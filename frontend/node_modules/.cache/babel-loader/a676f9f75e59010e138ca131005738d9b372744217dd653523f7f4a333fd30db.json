{"ast":null,"code":"import { GET_TOUR_SUCCESS, GET_TOUR_FAIL, GET_TOUR_DETAIL_SUCCESS, GET_TOUR_DETAIL_FAIL, GET_TOUR_RESULT_FAIL, GET_TOUR_RESULT_SUCCESS, CREATE_REVIEW_SUCCESS, CREATE_REVIEW_FAIL } from \"../types\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../../config/config\";\nimport { apis } from \"../../config/api\";\nexport const getTour = () => async dispatch => {\n  try {\n    const res = await axios.get(BASE_URL + apis.get_tour);\n    dispatch({\n      type: GET_TOUR_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_TOUR_FAIL,\n      payload: error.response\n    });\n  }\n};\nexport const getTourDetail = tourId => async dispatch => {\n  try {\n    const res = await axios.get(BASE_URL + apis.get_tour + `/${tourId}`);\n    dispatch({\n      type: GET_TOUR_DETAIL_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_TOUR_DETAIL_FAIL,\n      payload: error.response\n    });\n  }\n};\nexport const getTourResult = data => async dispatch => {\n  try {\n    const res = await axios.get(BASE_URL + apis.get_tour_result + data);\n    dispatch({\n      type: GET_TOUR_RESULT_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_TOUR_RESULT_FAIL,\n      payload: error.response\n    });\n  }\n};\nexport const createReview = (id, data) => async dispatch => {\n  try {\n    const res = await axios.post(BASE_URL + apis.add_review + `/${id}`, data);\n    dispatch({\n      type: CREATE_REVIEW_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_REVIEW_FAIL,\n      payload: error.response\n    });\n  }\n};","map":{"version":3,"names":["GET_TOUR_SUCCESS","GET_TOUR_FAIL","GET_TOUR_DETAIL_SUCCESS","GET_TOUR_DETAIL_FAIL","GET_TOUR_RESULT_FAIL","GET_TOUR_RESULT_SUCCESS","CREATE_REVIEW_SUCCESS","CREATE_REVIEW_FAIL","axios","BASE_URL","apis","getTour","dispatch","res","get","get_tour","type","payload","data","error","response","getTourDetail","tourId","getTourResult","get_tour_result","createReview","id","post","add_review"],"sources":["/windows/sourabh 3.0/MernStack-Tour-Management/tour-travels/frontend/src/redux/action/tour.js"],"sourcesContent":["import {\n  GET_TOUR_SUCCESS,\n  GET_TOUR_FAIL,\n  GET_TOUR_DETAIL_SUCCESS,\n  GET_TOUR_DETAIL_FAIL,\n  GET_TOUR_RESULT_FAIL,\n  GET_TOUR_RESULT_SUCCESS,\n  CREATE_REVIEW_SUCCESS,\n  CREATE_REVIEW_FAIL,\n} from \"../types\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../../config/config\";\nimport { apis } from \"../../config/api\";\n\nexport const getTour = () => async (dispatch) => {\n  try {\n    const res = await axios.get(BASE_URL + apis.get_tour);\n    dispatch({\n      type: GET_TOUR_SUCCESS,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_TOUR_FAIL,\n      payload: error.response,\n    });\n  }\n};\n\nexport const getTourDetail = (tourId) => async (dispatch) => {\n  try {\n    const res = await axios.get(BASE_URL + apis.get_tour + `/${tourId}`);\n    dispatch({\n      type: GET_TOUR_DETAIL_SUCCESS,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_TOUR_DETAIL_FAIL,\n      payload: error.response,\n    });\n  }\n};\n\nexport const getTourResult = (data) => async (dispatch) => {\n  try {\n    const res = await axios.get(BASE_URL + apis.get_tour_result + data);\n    dispatch({\n      type: GET_TOUR_RESULT_SUCCESS,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_TOUR_RESULT_FAIL,\n      payload: error.response,\n    });\n  }\n};\n\nexport const createReview = (id, data) => async (dispatch) => {\n  try {\n    const res = await axios.post(BASE_URL + apis.add_review + `/${id}`,data)\n    dispatch({\n      type: CREATE_REVIEW_SUCCESS,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_REVIEW_FAIL,\n      payload: error.response,\n    });\n  }\n};\n"],"mappings":"AAAA,SACEA,gBAAgB,EAChBC,aAAa,EACbC,uBAAuB,EACvBC,oBAAoB,EACpBC,oBAAoB,EACpBC,uBAAuB,EACvBC,qBAAqB,EACrBC,kBAAkB,QACb,UAAU;AACjB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,OAAO,MAAMC,OAAO,GAAG,MAAM,MAAOC,QAAQ,IAAK;EAC/C,IAAI;IACF,MAAMC,GAAG,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,QAAQ,GAAGC,IAAI,CAACK,QAAQ,CAAC;IACrDH,QAAQ,CAAC;MACPI,IAAI,EAAEhB,gBAAgB;MACtBiB,OAAO,EAAEJ,GAAG,CAACK;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPI,IAAI,EAAEf,aAAa;MACnBgB,OAAO,EAAEE,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIC,MAAM,IAAK,MAAOV,QAAQ,IAAK;EAC3D,IAAI;IACF,MAAMC,GAAG,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,QAAQ,GAAGC,IAAI,CAACK,QAAQ,GAAI,IAAGO,MAAO,EAAC,CAAC;IACpEV,QAAQ,CAAC;MACPI,IAAI,EAAEd,uBAAuB;MAC7Be,OAAO,EAAEJ,GAAG,CAACK;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPI,IAAI,EAAEb,oBAAoB;MAC1Bc,OAAO,EAAEE,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMG,aAAa,GAAIL,IAAI,IAAK,MAAON,QAAQ,IAAK;EACzD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAML,KAAK,CAACM,GAAG,CAACL,QAAQ,GAAGC,IAAI,CAACc,eAAe,GAAGN,IAAI,CAAC;IACnEN,QAAQ,CAAC;MACPI,IAAI,EAAEX,uBAAuB;MAC7BY,OAAO,EAAEJ,GAAG,CAACK;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPI,IAAI,EAAEZ,oBAAoB;MAC1Ba,OAAO,EAAEE,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMK,YAAY,GAAG,CAACC,EAAE,EAAER,IAAI,KAAK,MAAON,QAAQ,IAAK;EAC5D,IAAI;IACF,MAAMC,GAAG,GAAG,MAAML,KAAK,CAACmB,IAAI,CAAClB,QAAQ,GAAGC,IAAI,CAACkB,UAAU,GAAI,IAAGF,EAAG,EAAC,EAACR,IAAI,CAAC;IACxEN,QAAQ,CAAC;MACPI,IAAI,EAAEV,qBAAqB;MAC3BW,OAAO,EAAEJ,GAAG,CAACK;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPI,IAAI,EAAET,kBAAkB;MACxBU,OAAO,EAAEE,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}