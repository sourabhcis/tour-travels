{"ast":null,"code":"var _jsxFileName = \"/windows/sourabh 3.0/MernStack-Tour-Management/tour-management/frontend/src/stripe/CheckoutForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useStripe, useElements, PaymentElement } from '@stripe/react-stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckoutForm = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [errorMessage, setErrorMessage] = useState(null);\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    const {\n      error\n    } = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: 'https://example.com/order/123/complete'\n      }\n    });\n    if (error) {\n      // This point will only be reached if there is an immediate error when\n      // confirming the payment. Show error to your customer (for example, payment\n      // details incomplete)\n      setErrorMessage(error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !stripe,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(CheckoutForm, \"h4FiSkOun1ZNv/ijUbXQxJX1xVI=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nexport default CheckoutForm;\nvar _c;\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"names":["React","useState","useStripe","useElements","PaymentElement","CheckoutForm","stripe","elements","errorMessage","setErrorMessage","handleSubmit","event","preventDefault","error","confirmPayment","confirmParams","return_url","message"],"sources":["/windows/sourabh 3.0/MernStack-Tour-Management/tour-management/frontend/src/stripe/CheckoutForm.js"],"sourcesContent":["import React, {useState} from 'react';\nimport {useStripe, useElements, PaymentElement} from '@stripe/react-stripe-js';\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const handleSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const {error} = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: 'https://example.com/order/123/complete',\n      },\n    });\n\n\n    if (error) {\n      // This point will only be reached if there is an immediate error when\n      // confirming the payment. Show error to your customer (for example, payment\n      // details incomplete)\n      setErrorMessage(error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <PaymentElement />\n      <button disabled={!stripe}>Submit</button>\n      {/* Show error message to your customers */}\n      {errorMessage && <div>{errorMessage}</div>}\n    </form>\n  )\n};\n\nexport default CheckoutForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAAQC,SAAS,EAAEC,WAAW,EAAEC,cAAc,QAAO,yBAAyB;AAAC;AAE/E,MAAMC,YAAY,GAAG,MAAM;EAAA;EACzB,MAAMC,MAAM,GAAGJ,SAAS,EAAE;EAC1B,MAAMK,QAAQ,GAAGJ,WAAW,EAAE;EAE9B,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMS,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpC;IACA;IACAA,KAAK,CAACC,cAAc,EAAE;IAEtB,IAAI,CAACN,MAAM,IAAI,CAACC,QAAQ,EAAE;MACxB;MACA;MACA;IACF;IAEA,MAAM;MAACM;IAAK,CAAC,GAAG,MAAMP,MAAM,CAACQ,cAAc,CAAC;MAC1C;MACAP,QAAQ;MACRQ,aAAa,EAAE;QACbC,UAAU,EAAE;MACd;IACF,CAAC,CAAC;IAGF,IAAIH,KAAK,EAAE;MACT;MACA;MACA;MACAJ,eAAe,CAACI,KAAK,CAACI,OAAO,CAAC;IAChC,CAAC,MAAM;MACL;MACA;MACA;IAAA;EAEJ,CAAC;EAED,oBACE;IAAM,QAAQ,EAAEP,YAAa;IAAA,wBAC3B,QAAC,cAAc;MAAA;MAAA;MAAA;IAAA,QAAG,eAClB;MAAQ,QAAQ,EAAE,CAACJ,MAAO;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAS,EAEzCE,YAAY,iBAAI;MAAA,UAAMA;IAAY;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QACrC;AAEX,CAAC;AAAC,GA9CIH,YAAY;EAAA,QACDH,SAAS,EACPC,WAAW;AAAA;AAAA,KAFxBE,YAAY;AAgDlB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}