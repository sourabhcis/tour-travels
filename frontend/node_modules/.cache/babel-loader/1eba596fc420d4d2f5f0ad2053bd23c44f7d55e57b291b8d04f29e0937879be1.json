{"ast":null,"code":"var _jsxFileName = \"/windows/sourabh 3.0/MernStack-Tour-Management/tour-management/frontend/src/stripe/MyStoreCheckout.js\";\nimport React from 'react';\nimport { injectStripe } from 'react-stripe-elements';\nimport AddressSection from './AddressSection';\nimport CardSection from './CardSection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MyStoreCheckout extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.handleSubmit = ev => {\n      // We don't want to let default form submission happen here, which would refresh the page.\n      ev.preventDefault();\n\n      // Use Elements to get a reference to the Card Element mounted somewhere\n      // in your <Elements> tree. Elements will know how to find your Card Element\n      // because only one is allowed.\n      // See our getElement documentation for more:\n      // https://stripe.com/docs/stripe-js/reference#elements-get-element\n      const cardElement = this.props.elements.getElement('card');\n\n      // From here we can call createPaymentMethod to create a PaymentMethod\n      // See our createPaymentMethod documentation for more:\n      // https://stripe.com/docs/stripe-js/reference#stripe-create-payment-method\n      this.props.stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details: {\n          name: 'Jenny Rosen'\n        }\n      }).then(_ref => {\n        let {\n          paymentMethod\n        } = _ref;\n        console.log('Received Stripe PaymentMethod:', paymentMethod);\n      });\n\n      // You can also use confirmCardPayment with the PaymentIntents API automatic confirmation flow.\n      // See our confirmCardPayment documentation for more:\n      // https://stripe.com/docs/stripe-js/reference#stripe-confirm-card-payment\n      this.props.stripe.confirmCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n        payment_method: {\n          card: cardElement\n        }\n      });\n\n      // You can also use confirmCardSetup with the SetupIntents API.\n      // See our confirmCardSetup documentation for more:\n      // https://stripe.com/docs/stripe-js/reference#stripe-confirm-card-setup\n      this.props.stripe.confirmCardSetup('{PAYMENT_INTENT_CLIENT_SECRET}', {\n        payment_method: {\n          card: cardElement\n        }\n      });\n\n      // You can also use createToken to create tokens.\n      // See our tokens documentation for more:\n      // https://stripe.com/docs/stripe-js/reference#stripe-create-token\n      // With createToken, you will not need to pass in the reference to\n      // the Element. It will be inferred automatically.\n      this.props.stripe.createToken({\n        type: 'card',\n        name: 'Jenny Rosen'\n      });\n      // token type can optionally be inferred if there is only one Element\n      // with which to create tokens\n      // this.props.stripe.createToken({name: 'Jenny Rosen'});\n\n      // You can also use createSource to create Sources.\n      // See our Sources documentation for more:\n      // https://stripe.com/docs/stripe-js/reference#stripe-create-source\n      // With createSource, you will not need to pass in the reference to\n      // the Element. It will be inferred automatically.\n      this.props.stripe.createSource({\n        type: 'card',\n        owner: {\n          name: 'Jenny Rosen'\n        }\n      });\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(AddressSection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardSection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Confirm order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default _c = injectStripe(CheckoutForm);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","injectStripe","AddressSection","CardSection","MyStoreCheckout","Component","handleSubmit","ev","preventDefault","cardElement","props","elements","getElement","stripe","createPaymentMethod","type","card","billing_details","name","then","paymentMethod","console","log","confirmCardPayment","payment_method","confirmCardSetup","createToken","createSource","owner","render","CheckoutForm"],"sources":["/windows/sourabh 3.0/MernStack-Tour-Management/tour-management/frontend/src/stripe/MyStoreCheckout.js"],"sourcesContent":["import React from 'react';\nimport {injectStripe} from 'react-stripe-elements';\n \nimport AddressSection from './AddressSection';\nimport CardSection from './CardSection';\n \nclass MyStoreCheckout extends React.Component {\n  handleSubmit = (ev) => {\n    // We don't want to let default form submission happen here, which would refresh the page.\n    ev.preventDefault();\n \n    // Use Elements to get a reference to the Card Element mounted somewhere\n    // in your <Elements> tree. Elements will know how to find your Card Element\n    // because only one is allowed.\n    // See our getElement documentation for more:\n    // https://stripe.com/docs/stripe-js/reference#elements-get-element\n    const cardElement = this.props.elements.getElement('card');\n \n    // From here we can call createPaymentMethod to create a PaymentMethod\n    // See our createPaymentMethod documentation for more:\n    // https://stripe.com/docs/stripe-js/reference#stripe-create-payment-method\n    this.props.stripe\n      .createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details: {name: 'Jenny Rosen'},\n      })\n      .then(({paymentMethod}) => {\n        console.log('Received Stripe PaymentMethod:', paymentMethod);\n      });\n \n    // You can also use confirmCardPayment with the PaymentIntents API automatic confirmation flow.\n    // See our confirmCardPayment documentation for more:\n    // https://stripe.com/docs/stripe-js/reference#stripe-confirm-card-payment\n    this.props.stripe.confirmCardPayment('{PAYMENT_INTENT_CLIENT_SECRET}', {\n      payment_method: {\n        card: cardElement,\n      },\n    });\n \n    // You can also use confirmCardSetup with the SetupIntents API.\n    // See our confirmCardSetup documentation for more:\n    // https://stripe.com/docs/stripe-js/reference#stripe-confirm-card-setup\n    this.props.stripe.confirmCardSetup('{PAYMENT_INTENT_CLIENT_SECRET}', {\n      payment_method: {\n        card: cardElement,\n      },\n    });\n \n    // You can also use createToken to create tokens.\n    // See our tokens documentation for more:\n    // https://stripe.com/docs/stripe-js/reference#stripe-create-token\n    // With createToken, you will not need to pass in the reference to\n    // the Element. It will be inferred automatically.\n    this.props.stripe.createToken({type: 'card', name: 'Jenny Rosen'});\n    // token type can optionally be inferred if there is only one Element\n    // with which to create tokens\n    // this.props.stripe.createToken({name: 'Jenny Rosen'});\n \n    // You can also use createSource to create Sources.\n    // See our Sources documentation for more:\n    // https://stripe.com/docs/stripe-js/reference#stripe-create-source\n    // With createSource, you will not need to pass in the reference to\n    // the Element. It will be inferred automatically.\n    this.props.stripe.createSource({\n      type: 'card',\n      owner: {\n        name: 'Jenny Rosen',\n      },\n    });\n  };\n \n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <AddressSection />\n        <CardSection />\n        <button>Confirm order</button>\n      </form>\n    );\n  }\n}\n \nexport default injectStripe(CheckoutForm);"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,YAAY,QAAO,uBAAuB;AAElD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,WAAW,MAAM,eAAe;AAAC;AAExC,MAAMC,eAAe,SAASJ,KAAK,CAACK,SAAS,CAAC;EAAA;IAAA;IAAA,KAC5CC,YAAY,GAAIC,EAAE,IAAK;MACrB;MACAA,EAAE,CAACC,cAAc,EAAE;;MAEnB;MACA;MACA;MACA;MACA;MACA,MAAMC,WAAW,GAAG,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACC,UAAU,CAAC,MAAM,CAAC;;MAE1D;MACA;MACA;MACA,IAAI,CAACF,KAAK,CAACG,MAAM,CACdC,mBAAmB,CAAC;QACnBC,IAAI,EAAE,MAAM;QACZC,IAAI,EAAEP,WAAW;QACjBQ,eAAe,EAAE;UAACC,IAAI,EAAE;QAAa;MACvC,CAAC,CAAC,CACDC,IAAI,CAAC,QAAqB;QAAA,IAApB;UAACC;QAAa,CAAC;QACpBC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEF,aAAa,CAAC;MAC9D,CAAC,CAAC;;MAEJ;MACA;MACA;MACA,IAAI,CAACV,KAAK,CAACG,MAAM,CAACU,kBAAkB,CAAC,gCAAgC,EAAE;QACrEC,cAAc,EAAE;UACdR,IAAI,EAAEP;QACR;MACF,CAAC,CAAC;;MAEF;MACA;MACA;MACA,IAAI,CAACC,KAAK,CAACG,MAAM,CAACY,gBAAgB,CAAC,gCAAgC,EAAE;QACnED,cAAc,EAAE;UACdR,IAAI,EAAEP;QACR;MACF,CAAC,CAAC;;MAEF;MACA;MACA;MACA;MACA;MACA,IAAI,CAACC,KAAK,CAACG,MAAM,CAACa,WAAW,CAAC;QAACX,IAAI,EAAE,MAAM;QAAEG,IAAI,EAAE;MAAa,CAAC,CAAC;MAClE;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA,IAAI,CAACR,KAAK,CAACG,MAAM,CAACc,YAAY,CAAC;QAC7BZ,IAAI,EAAE,MAAM;QACZa,KAAK,EAAE;UACLV,IAAI,EAAE;QACR;MACF,CAAC,CAAC;IACJ,CAAC;EAAA;EAEDW,MAAM,GAAG;IACP,oBACE;MAAM,QAAQ,EAAE,IAAI,CAACvB,YAAa;MAAA,wBAChC,QAAC,cAAc;QAAA;QAAA;QAAA;MAAA,QAAG,eAClB,QAAC,WAAW;QAAA;QAAA;QAAA;MAAA,QAAG,eACf;QAAA,UAAQ;MAAa;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACzB;EAEX;AACF;AAEA,oBAAeL,YAAY,CAAC6B,YAAY,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}